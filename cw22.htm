<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cadastro de Cliente - WZZM</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="https://code.getmdl.io/1.3.0/material.indigo-pink.min.css">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f5f5f5;
            display: flex;
            justify-content: center;
            align-items: flex-start; /* Alinha no topo */
            min-height: calc(100vh - 200px); /* Ajusta para caber na iframe */
            padding: 20px;
            box-sizing: border-box;
        }
        .mdl-card {
            width: 100%;
            max-width: 600px;
            margin: 20px auto;
            padding: 20px;
        }
        .mdl-textfield {
            width: 100%;
            margin-bottom: 16px;
        }
        .mdl-checkbox__label {
            font-size: 14px;
            color: rgba(0, 0, 0, .54);
        }
        .form-actions {
            display: flex;
            justify-content: flex-end;
            margin-top: 20px;
        }
        .mdl-button {
            margin-left: 8px;
        }
        .loading-message {
            display: none;
            text-align: center;
            margin-top: 20px;
            color: #3f51b5;
        }
        .success-message {
            display: none;
            text-align: center;
            margin-top: 20px;
            color: #4CAF50;
        }
        .error-message {
            display: none;
            text-align: center;
            margin-top: 20px;
            color: #F44336;
        }
    </style>
</head>
<body>

    <div class="mdl-card mdl-shadow--2dp">
        <div class="mdl-card__title mdl-card--expand">
            <h2 class="mdl-card__title-text">Cadastro de Novo Cliente</h2>
        </div>
        <div class="mdl-card__supporting-text">
            <form id="clientForm">
                <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                    <input class="mdl-textfield__input" type="text" id="fullName" required>
                    <label class="mdl-textfield__label" for="fullName">Nome Completo</label>
                </div>

                <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                    <input class="mdl-textfield__input" type="text" id="rg">
                    <label class="mdl-textfield__label" for="rg">RG</label>
                </div>

                <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                    <input class="mdl-textfield__input" type="text" id="cpf" pattern="[0-9]{3}\.?[0-9]{3}\.?[0-9]{3}-?[0-9]{2}" required>
                    <label class="mdl-textfield__label" for="cpf">CPF (xxx.xxx.xxx-xx)</label>
                    <span class="mdl-textfield__error">Formato de CPF inválido!</span>
                </div>

                <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                    <input class="mdl-textfield__input" type="text" id="socialName">
                    <label class="mdl-textfield__label" for="socialName">Nome Social (Opcional)</label>
                </div>

                <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                    <input class="mdl-textfield__input" type="tel" id="phoneNumber" pattern="\+?[0-9\s()-]{10,}" required>
                    <label class="mdl-textfield__label" for="phoneNumber">Telefone (ex: +5511987654321)</label>
                    <span class="mdl-textfield__error">Telefone inválido!</span>
                </div>

                <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                    <input class="mdl-textfield__input" type="email" id="email" required>
                    <label class="mdl-textfield__label" for="email">E-mail</label>
                    <span class="mdl-textfield__error">E-mail inválido!</span>
                </div>

                <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                    <input class="mdl-textfield__input" type="password" id="additionalPassword" required>
                    <label class="mdl-textfield__label" for="additionalPassword">Senha Adicional</label>
                </div>

                <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                    <input class="mdl-textfield__input" type="password" id="confirmAdditionalPassword" required>
                    <label class="mdl-textfield__label" for="confirmAdditionalPassword">Confirmar Senha Adicional</label>
                    <span class="mdl-textfield__error" id="passwordMatchError" style="display:none;">As senhas não coincidem!</span>
                </div>

                <label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" for="agreedToTerms">
                    <input type="checkbox" id="agreedToTerms" class="mdl-checkbox__input" required>
                    <span class="mdl-checkbox__label">Concordo com as regras de uso</span>
                </label>
                <div style="color: red; font-size: 12px; margin-top: 8px;" id="termsError" style="display:none;">Você precisa concordar com as regras de uso.</div>

                <div class="form-actions">
                    <button type="submit" class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-js-ripple-effect">
                        Cadastrar Cliente
                    </button>
                    <button type="reset" class="mdl-button mdl-js-button mdl-js-ripple-effect">
                        Limpar
                    </button>
                </div>
            </form>
            <div id="loadingMessage" class="loading-message">Salvando dados...</div>
            <div id="successMessage" class="success-message">Cliente cadastrado com sucesso!</div>
            <div id="errorMessage" class="error-message">Erro ao cadastrar cliente. Tente novamente.</div>
        </div>
    </div>

    <script defer src="https://code.getmdl.io/1.3.0/material.min.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-firestore-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-auth-compat.js"></script>
    <script>
        // --- Configuração do Firebase ---
        // VOCÊ PRECISARÁ INSERIR SUA CONFIGURAÇÃO DO FIREBASE AQUI NOVAMENTE
        // OU PASSAR ESSAS INFORMAÇÕES DO HTML PAI (opção mais avançada com window.parent)
        const firebaseConfig = {
            apiKey: "AIzaSyB9GkSqTIZ0kbVsba_WOdQeVAETrF9qna0",
            authDomain: "wzzm-ce3fc.firebaseapp.com",
            projectId: "wzzm-ce3fc",
            storageBucket: "wzzm-ce3fc.appspot.com",
            messagingSenderId: "249427877153",
            appId: "1:249427877153:web:0e4297294794a5aadeb260",
            measurementId: "G-PLKNZNFCQ8"
        };

        // Inicializa o Firebase apenas se ainda não foi inicializado
        if (!firebase.apps.length) {
            firebase.initializeApp(firebaseConfig);
        }
        const firestore = firebase.firestore();

        // Referências aos elementos do formulário
        const clientForm = document.getElementById('clientForm');
        const fullNameInput = document.getElementById('fullName');
        const rgInput = document.getElementById('rg');
        const cpfInput = document.getElementById('cpf');
        const socialNameInput = document.getElementById('socialName');
        const phoneNumberInput = document.getElementById('phoneNumber');
        const emailInput = document.getElementById('email');
        const additionalPasswordInput = document.getElementById('additionalPassword');
        const confirmAdditionalPasswordInput = document.getElementById('confirmAdditionalPassword');
        const agreedToTermsCheckbox = document.getElementById('agreedToTerms');

        const passwordMatchError = document.getElementById('passwordMatchError');
        const termsError = document.getElementById('termsError');
        const loadingMessage = document.getElementById('loadingMessage');
        const successMessage = document.getElementById('successMessage');
        const errorMessage = document.getElementById('errorMessage');

        // Função para mostrar mensagens temporárias
        function showMessage(element, message, type = 'success') {
            element.textContent = message;
            element.className = `${type}-message`; // Define a classe para estilização (success-message, error-message, loading-message)
            element.style.display = 'block';
            setTimeout(() => {
                element.style.display = 'none';
            }, 5000); // Esconde a mensagem após 5 segundos
        }

        clientForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            // Validação de senhas
            if (additionalPasswordInput.value !== confirmAdditionalPasswordInput.value) {
                passwordMatchError.style.display = 'block';
                return;
            } else {
                passwordMatchError.style.display = 'none';
            }

            // Validação do checkbox
            if (!agreedToTermsCheckbox.checked) {
                termsError.style.display = 'block';
                return;
            } else {
                termsError.style.display = 'none';
            }

            // Esconde mensagens anteriores e mostra carregamento
            successMessage.style.display = 'none';
            errorMessage.style.display = 'none';
            showMessage(loadingMessage, 'Salvando dados...', 'loading');

            const clientData = {
                fullName: fullNameInput.value.trim(),
                rg: rgInput.value.trim(),
                cpf: cpfInput.value.trim().replace(/[.-]/g, ''), // Remove pontos e traço
                socialName: socialNameInput.value.trim(),
                // A senha adicional NUNCA deve ser enviada diretamente.
                // Idealmente, você faria um hash no lado do servidor (Cloud Functions)
                // Para este exemplo frontend-only, vamos apenas armazená-la (NÃO RECOMENDADO PARA PROD)
                // Para um projeto real, pesquise sobre Firebase Cloud Functions para hashing de senhas.
                additionalPassword: additionalPasswordInput.value, // Apenas para fins de demonstração
                isActive: true,
                isBanned: false,
                banReason: null,
                agreedToTerms: agreedToTermsCheckbox.checked,
                createdAt: firebase.firestore.FieldValue.serverTimestamp()
            };

            const phoneNumber = phoneNumberInput.value.trim();
            const emailAddress = emailInput.value.trim();

            try {
                // 1. Salvar o cliente na coleção 'clients'
                const clientRef = await firestore.collection('clients').add(clientData);
                const clientId = clientRef.id;

                // 2. Salvar o telefone na coleção 'clientPhones'
                await firestore.collection('clientPhones').add({
                    clientId: clientId,
                    phoneNumber: phoneNumber,
                    isPrimary: true, // Assumimos que é o principal por enquanto
                    type: 'celular', // Pode ser alterado no formulário se houver opções
                    createdAt: firebase.firestore.FieldValue.serverTimestamp()
                });

                // 3. Salvar o email na coleção 'clientEmails'
                await firestore.collection('clientEmails').add({
                    clientId: clientId,
                    emailAddress: emailAddress,
                    isPrimary: true, // Assumimos que é o principal por enquanto
                    type: 'pessoal', // Pode ser alterado no formulário se houver opções
                    createdAt: firebase.firestore.FieldValue.serverTimestamp()
                });

                // 4. Registrar a criação no histórico 'clientHistory'
                await firestore.collection('clientHistory').add({
                    clientId: clientId,
                    editorId: firebase.auth().currentUser ? firebase.auth().currentUser.uid : 'Anonimo/Sistema', // Pega o UID do usuário logado ou indica Anônimo
                    editDate: firebase.firestore.FieldValue.serverTimestamp(),
                    changedFields: {
                        "newClient": { "status": "created" } // Indica que é um novo cliente
                    },
                    reason: "Criação de novo registro de cliente via formulário"
                });

                showMessage(successMessage, 'Cliente cadastrado com sucesso!', 'success');
                clientForm.reset(); // Limpa o formulário após o sucesso
                if (componentHandler) {
                    componentHandler.upgradeDom(); // Re-renderiza os componentes MDL após reset
                }

            } catch (error) {
                console.error("Erro ao adicionar cliente ao Firebase:", error);
                showMessage(errorMessage, `Erro ao cadastrar cliente: ${error.message}`, 'error');
            } finally {
                loadingMessage.style.display = 'none'; // Esconde a mensagem de carregamento
            }
        });

        // Event listener para validação de senhas em tempo real (opcional)
        additionalPasswordInput.addEventListener('input', validatePasswords);
        confirmAdditionalPasswordInput.addEventListener('input', validatePasswords);

        function validatePasswords() {
            if (additionalPasswordInput.value !== confirmAdditionalPasswordInput.value) {
                passwordMatchError.style.display = 'block';
            } else {
                passwordMatchError.style.display = 'none';
            }
        }

        // Validação básica do checkbox de termos antes do submit
        agreedToTermsCheckbox.addEventListener('change', () => {
            if (agreedToTermsCheckbox.checked) {
                termsError.style.display = 'none';
            }
        });
    </script>
</body>
</html>
